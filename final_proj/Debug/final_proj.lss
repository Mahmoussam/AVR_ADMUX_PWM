
final_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000004de  00000572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800120  00800120  00000592  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001092  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094a  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006aa  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077f  00000000  00000000  00002cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  9e:	0c 94 6d 02 	jmp	0x4da	; 0x4da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_reset>:
ï»¿#include "ALCD.H"
char rowCount;
char lastPOSy;
void lcd_reset()
{
	    lcd_port_dir=0XFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
        lcd_port = 0xFF;
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <lcd_reset+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_reset+0x16>
  bc:	00 00       	nop
        _delay_ms(20);
        lcd_port = 0x03+LCD_EN;
  be:	93 e8       	ldi	r25, 0x83	; 131
  c0:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	ef e3       	ldi	r30, 0x3F	; 63
  c8:	fc e9       	ldi	r31, 0x9C	; 156
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_reset+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_reset+0x2a>
  d0:	00 00       	nop
        _delay_ms(10);
        lcd_port = 0x03+LCD_EN;
  d2:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	ef e9       	ldi	r30, 0x9F	; 159
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_reset+0x34>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_reset+0x3a>
  e0:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x03+LCD_EN;
  e2:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_reset+0x44>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_reset+0x4a>
  f0:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x02+LCD_EN;
  f2:	82 e8       	ldi	r24, 0x82	; 130
  f4:	8b b9       	out	0x0b, r24	; 11
        lcd_port = 0x02;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	ef e9       	ldi	r30, 0x9F	; 159
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_reset+0x58>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_reset+0x5e>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <lcd_cmd>:
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 void lcd_cmd (char cmd)
{
        lcd_port = ((cmd >> 4) & 0x0F)|LCD_EN;
 108:	98 2f       	mov	r25, r24
 10a:	92 95       	swap	r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	29 2f       	mov	r18, r25
 110:	20 68       	ori	r18, 0x80	; 128
 112:	2b b9       	out	0x0b, r18	; 11
        lcd_port = ((cmd >> 4) & 0x0F);
 114:	9b b9       	out	0x0b, r25	; 11

        lcd_port = (cmd & 0x0F)|LCD_EN;
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	98 2f       	mov	r25, r24
 11a:	90 68       	ori	r25, 0x80	; 128
 11c:	9b b9       	out	0x0b, r25	; 11
        lcd_port = (cmd & 0x0F);
 11e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e1       	ldi	r24, 0x1F	; 31
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_cmd+0x1c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_cmd+0x22>
 12a:	00 00       	nop
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_cmd+0x28>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_cmd+0x2e>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <lcd_init>:
        _delay_ms(1);
}

void lcd_init (unsigned char rows)
{
	rowCount=rows;
 13a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	lastPOSy=0;
 13e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <lastPOSy>
        lcd_reset();         // Call LCD reset
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_reset>
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font. 
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
        lcd_cmd(0x0c);       // Display no cursor - no blink.
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
 15e:	08 95       	ret

00000160 <lcd_data>:
        _delay_us(200);
}

void lcd_data (unsigned char dat)
{
        lcd_port = (((dat >> 4) & 0x0F)|LCD_EN|LCD_RS);
 160:	98 2f       	mov	r25, r24
 162:	92 95       	swap	r25
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	29 2f       	mov	r18, r25
 168:	20 6a       	ori	r18, 0xA0	; 160
 16a:	2b b9       	out	0x0b, r18	; 11
        lcd_port = (((dat >> 4) & 0x0F)|LCD_RS);
 16c:	90 62       	ori	r25, 0x20	; 32
 16e:	9b b9       	out	0x0b, r25	; 11
       
        lcd_port = ((dat & 0x0F)|LCD_EN|LCD_RS);
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	98 2f       	mov	r25, r24
 174:	90 6a       	ori	r25, 0xA0	; 160
 176:	9b b9       	out	0x0b, r25	; 11
        lcd_port = ((dat & 0x0F)|LCD_RS);
 178:	80 62       	ori	r24, 0x20	; 32
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	93 e0       	ldi	r25, 0x03	; 3
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_data+0x20>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_data+0x26>
 186:	00 00       	nop
 188:	8f e1       	ldi	r24, 0x1F	; 31
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_data+0x2c>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_data+0x32>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <lcd_gotoxy>:
        _delay_us(200);
        _delay_us(200);
        }
void lcd_gotoxy(char posX,char posY)
{
    if (posY==0 ) 
 196:	61 11       	cpse	r22, r1
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <lcd_gotoxy+0xc>
        lcd_cmd((1<<7)+0x00+posX);
 19a:	80 58       	subi	r24, 0x80	; 128
 19c:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <lcd_gotoxy+0x18>
    else
	{
        lcd_cmd((1<<7)+0x40+posX);
 1a2:	80 54       	subi	r24, 0x40	; 64
 1a4:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
	lastPOSy=1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <lastPOSy>
 1ae:	85 ed       	ldi	r24, 0xD5	; 213
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_gotoxy+0x1a>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <lcd_clear>:
		_delay_us(40);
}

void lcd_clear(void)
{
	lcd_cmd(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9f e1       	ldi	r25, 0x1F	; 31
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_clear+0xa>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_clear+0x10>
 1c8:	00 00       	nop
	_delay_ms(2);
	lcd_cmd(0x02);
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 84 00 	call	0x108	; 0x108 <lcd_cmd>
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	9f e1       	ldi	r25, 0x1F	; 31
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_clear+0x1c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_clear+0x22>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <lcd_putchar>:
	_delay_ms(2);
}

void lcd_putchar(unsigned char data)
{
	lcd_data(data);
 1de:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_data>
 1e2:	08 95       	ret

000001e4 <lcd_puts>:
}

void lcd_puts( char *str)
{
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	8c 01       	movw	r16, r24
	unsigned char i=0;
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(*(str+i)!='\0'&&i<rowCount)
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <lcd_puts+0x12>
	{
	lcd_data(str[i]);
 1f0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_data>
	i++;	
 1f4:	cf 5f       	subi	r28, 0xFF	; 255

void lcd_puts( char *str)
{
	unsigned char i=0;
	
	while(*(str+i)!='\0'&&i<rowCount)
 1f6:	f8 01       	movw	r30, r16
 1f8:	ec 0f       	add	r30, r28
 1fa:	f1 1d       	adc	r31, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	21 f0       	breq	.+8      	; 0x20a <lcd_puts+0x26>
 202:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 206:	c9 17       	cp	r28, r25
 208:	98 f3       	brcs	.-26     	; 0x1f0 <lcd_puts+0xc>
	{
	lcd_data(str[i]);
	i++;	
	}
	if (i>rowCount-1&&lastPOSy==0)
 20a:	8c 2f       	mov	r24, r28
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <__data_end>
 212:	2c 2f       	mov	r18, r28
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
 21a:	28 17       	cp	r18, r24
 21c:	39 07       	cpc	r19, r25
 21e:	8c f4       	brge	.+34     	; 0x242 <lcd_puts+0x5e>
 220:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <lastPOSy>
 224:	81 11       	cpse	r24, r1
 226:	0d c0       	rjmp	.+26     	; 0x242 <lcd_puts+0x5e>
	{
		i=rowCount;
		lcd_gotoxy(0,1);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_gotoxy>
	
	while(*(str+i)!='\0')
 22e:	03 c0       	rjmp	.+6      	; 0x236 <lcd_puts+0x52>
	{
	lcd_data(str[i]);
 230:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_data>
	i++;	
 234:	cf 5f       	subi	r28, 0xFF	; 255
	if (i>rowCount-1&&lastPOSy==0)
	{
		i=rowCount;
		lcd_gotoxy(0,1);
	
	while(*(str+i)!='\0')
 236:	f8 01       	movw	r30, r16
 238:	ec 0f       	add	r30, r28
 23a:	f1 1d       	adc	r31, r1
 23c:	80 81       	ld	r24, Z
 23e:	81 11       	cpse	r24, r1
 240:	f7 cf       	rjmp	.-18     	; 0x230 <lcd_puts+0x4c>
	lcd_data(str[i]);
	i++;	
	}
	}
	
}
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <init_ADC>:
		_delay_ms(600);
		lcd_clear();
	}
}
void init_ADC(void){
	ADMUX =0x40;// use chip's vcc as ref,channel 0 
 24a:	80 e4       	ldi	r24, 0x40	; 64
 24c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA =0x87;// 1000 0111 ===>enable adc with prescalar 128
 250:	87 e8       	ldi	r24, 0x87	; 135
 252:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB=0x00;// best practice
 256:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 25a:	08 95       	ret

0000025c <ADC_read>:
}
uint16_t ADC_read(uint8_t channel){
	ADMUX |=channel;
 25c:	ec e7       	ldi	r30, 0x7C	; 124
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	90 81       	ld	r25, Z
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start ADC conversion
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));//wait till end of conversion
 270:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 274:	84 ff       	sbrs	r24, 4
 276:	fc cf       	rjmp	.-8      	; 0x270 <ADC_read+0x14>
	ADCSRA |=(1<<ADIF);//reset the flag
 278:	ea e7       	ldi	r30, 0x7A	; 122
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	80 83       	st	Z, r24
	uint16_t result=ADCL|(ADCH<<8);//ADC;
 282:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 286:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	98 2f       	mov	r25, r24
 28e:	88 27       	eor	r24, r24
	return result;
 290:	82 2b       	or	r24, r18
 292:	08 95       	ret

00000294 <main>:
/*
adc*5/2^10 = v_in

*/
int main(void)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	a0 97       	sbiw	r28, 0x20	; 32
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
    lcd_init(16);
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_init>
	init_ADC();
 2ae:	0e 94 25 01 	call	0x24a	; 0x24a <init_ADC>
	DDRD |=(1<<6);//for OC0A,PD6
 2b2:	8a b1       	in	r24, 0x0a	; 10
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	8a b9       	out	0x0a, r24	; 10
	TCCR0A =(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 2b8:	83 e8       	ldi	r24, 0x83	; 131
 2ba:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=(1<<CS00)|(1<<CS02);//1024 as prescaler to obtain cycle with 16 ms width
 2bc:	85 b5       	in	r24, 0x25	; 37
 2be:	85 60       	ori	r24, 0x05	; 5
 2c0:	85 bd       	out	0x25, r24	; 37
    uint32_t adc_val;
	char lcd_line1[16]="ADC val:       ",lcd_line2[16]="Duty cycle:    ";
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	e0 e0       	ldi	r30, 0x00	; 0
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	de 01       	movw	r26, r28
 2ca:	11 96       	adiw	r26, 0x01	; 1
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	8a 95       	dec	r24
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x38>
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	e0 e1       	ldi	r30, 0x10	; 16
 2d8:	f1 e0       	ldi	r31, 0x01	; 1
 2da:	de 01       	movw	r26, r28
 2dc:	51 96       	adiw	r26, 0x11	; 17
 2de:	01 90       	ld	r0, Z+
 2e0:	0d 92       	st	X+, r0
 2e2:	8a 95       	dec	r24
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x4a>
	
	
	while (1)
    {	
		//calculate and prepare necessary data
		adc_val=ADC_read(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 2e 01 	call	0x25c	; 0x25c <ADC_read>
 2ec:	7c 01       	movw	r14, r24
		uint8_t duty_cycle=(adc_val*100/1023);
 2ee:	9c 01       	movw	r18, r24
 2f0:	a4 e6       	ldi	r26, 0x64	; 100
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	0e 94 15 02 	call	0x42a	; 0x42a <__umulhisi3>
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	33 e0       	ldi	r19, 0x03	; 3
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__udivmodsi4>
		//calculate value for OCR0A
		uint8_t timer_val=duty_cycle*255/100;
 304:	02 2f       	mov	r16, r18
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	20 9f       	mul	r18, r16
 30c:	c0 01       	movw	r24, r0
 30e:	21 9f       	mul	r18, r17
 310:	90 0d       	add	r25, r0
 312:	11 24       	eor	r1, r1
 314:	64 e6       	ldi	r22, 0x64	; 100
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	0e 94 df 01 	call	0x3be	; 0x3be <__divmodhi4>
 31c:	86 2f       	mov	r24, r22
		if(timer_val>0)timer_val--;
 31e:	66 23       	and	r22, r22
 320:	11 f0       	breq	.+4      	; 0x326 <main+0x92>
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	86 0f       	add	r24, r22
		OCR0A=timer_val;
 326:	87 bd       	out	0x27, r24	; 39
		//build the output strings
		for(int i=8;i<16;i++)lcd_line1[i]=' ';
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	09 c0       	rjmp	.+18     	; 0x340 <main+0xac>
 32e:	e1 e0       	ldi	r30, 0x01	; 1
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ec 0f       	add	r30, r28
 334:	fd 1f       	adc	r31, r29
 336:	e8 0f       	add	r30, r24
 338:	f9 1f       	adc	r31, r25
 33a:	30 e2       	ldi	r19, 0x20	; 32
 33c:	30 83       	st	Z, r19
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	80 31       	cpi	r24, 0x10	; 16
 342:	91 05       	cpc	r25, r1
 344:	a4 f3       	brlt	.-24     	; 0x32e <main+0x9a>
 346:	8b e0       	ldi	r24, 0x0B	; 11
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	09 c0       	rjmp	.+18     	; 0x35e <main+0xca>
		for(int i=11;i<13;i++)lcd_line2[i]=' ';
 34c:	e1 e1       	ldi	r30, 0x11	; 17
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ec 0f       	add	r30, r28
 352:	fd 1f       	adc	r31, r29
 354:	e8 0f       	add	r30, r24
 356:	f9 1f       	adc	r31, r25
 358:	20 e2       	ldi	r18, 0x20	; 32
 35a:	20 83       	st	Z, r18
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	8d 30       	cpi	r24, 0x0D	; 13
 360:	91 05       	cpc	r25, r1
 362:	a4 f3       	brlt	.-24     	; 0x34c <main+0xb8>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 364:	4a e0       	ldi	r20, 0x0A	; 10
 366:	be 01       	movw	r22, r28
 368:	67 5f       	subi	r22, 0xF7	; 247
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	c7 01       	movw	r24, r14
 36e:	0e 94 38 02 	call	0x470	; 0x470 <__itoa_ncheck>
 372:	4a e0       	ldi	r20, 0x0A	; 10
 374:	be 01       	movw	r22, r28
 376:	64 5e       	subi	r22, 0xE4	; 228
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	c8 01       	movw	r24, r16
 37c:	0e 94 38 02 	call	0x470	; 0x470 <__itoa_ncheck>
		itoa(adc_val,lcd_line1+8,10);
		itoa(duty_cycle,lcd_line2+11,10);
		//lcd_line2[14]='%';
		//print to screen
		lcd_gotoxy(0,0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_gotoxy>
		lcd_puts(lcd_line1);
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_puts>
		lcd_gotoxy(0,1);
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_gotoxy>
		lcd_puts(lcd_line2);
 398:	ce 01       	movw	r24, r28
 39a:	41 96       	adiw	r24, 0x11	; 17
 39c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_puts>
		lcd_putchar('%');
 3a0:	85 e2       	ldi	r24, 0x25	; 37
 3a2:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putchar>
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	8b e4       	ldi	r24, 0x4B	; 75
 3aa:	9d e1       	ldi	r25, 0x1D	; 29
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x118>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x122>
 3b6:	00 00       	nop
		_delay_ms(600);
		lcd_clear();
 3b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clear>
	}
 3bc:	94 cf       	rjmp	.-216    	; 0x2e6 <main+0x52>

000003be <__divmodhi4>:
 3be:	97 fb       	bst	r25, 7
 3c0:	07 2e       	mov	r0, r23
 3c2:	16 f4       	brtc	.+4      	; 0x3c8 <__divmodhi4+0xa>
 3c4:	00 94       	com	r0
 3c6:	07 d0       	rcall	.+14     	; 0x3d6 <__divmodhi4_neg1>
 3c8:	77 fd       	sbrc	r23, 7
 3ca:	09 d0       	rcall	.+18     	; 0x3de <__divmodhi4_neg2>
 3cc:	0e 94 24 02 	call	0x448	; 0x448 <__udivmodhi4>
 3d0:	07 fc       	sbrc	r0, 7
 3d2:	05 d0       	rcall	.+10     	; 0x3de <__divmodhi4_neg2>
 3d4:	3e f4       	brtc	.+14     	; 0x3e4 <__divmodhi4_exit>

000003d6 <__divmodhi4_neg1>:
 3d6:	90 95       	com	r25
 3d8:	81 95       	neg	r24
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	08 95       	ret

000003de <__divmodhi4_neg2>:
 3de:	70 95       	com	r23
 3e0:	61 95       	neg	r22
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255

000003e4 <__divmodhi4_exit>:
 3e4:	08 95       	ret

000003e6 <__udivmodsi4>:
 3e6:	a1 e2       	ldi	r26, 0x21	; 33
 3e8:	1a 2e       	mov	r1, r26
 3ea:	aa 1b       	sub	r26, r26
 3ec:	bb 1b       	sub	r27, r27
 3ee:	fd 01       	movw	r30, r26
 3f0:	0d c0       	rjmp	.+26     	; 0x40c <__udivmodsi4_ep>

000003f2 <__udivmodsi4_loop>:
 3f2:	aa 1f       	adc	r26, r26
 3f4:	bb 1f       	adc	r27, r27
 3f6:	ee 1f       	adc	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	a2 17       	cp	r26, r18
 3fc:	b3 07       	cpc	r27, r19
 3fe:	e4 07       	cpc	r30, r20
 400:	f5 07       	cpc	r31, r21
 402:	20 f0       	brcs	.+8      	; 0x40c <__udivmodsi4_ep>
 404:	a2 1b       	sub	r26, r18
 406:	b3 0b       	sbc	r27, r19
 408:	e4 0b       	sbc	r30, r20
 40a:	f5 0b       	sbc	r31, r21

0000040c <__udivmodsi4_ep>:
 40c:	66 1f       	adc	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	88 1f       	adc	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	1a 94       	dec	r1
 416:	69 f7       	brne	.-38     	; 0x3f2 <__udivmodsi4_loop>
 418:	60 95       	com	r22
 41a:	70 95       	com	r23
 41c:	80 95       	com	r24
 41e:	90 95       	com	r25
 420:	9b 01       	movw	r18, r22
 422:	ac 01       	movw	r20, r24
 424:	bd 01       	movw	r22, r26
 426:	cf 01       	movw	r24, r30
 428:	08 95       	ret

0000042a <__umulhisi3>:
 42a:	a2 9f       	mul	r26, r18
 42c:	b0 01       	movw	r22, r0
 42e:	b3 9f       	mul	r27, r19
 430:	c0 01       	movw	r24, r0
 432:	a3 9f       	mul	r26, r19
 434:	70 0d       	add	r23, r0
 436:	81 1d       	adc	r24, r1
 438:	11 24       	eor	r1, r1
 43a:	91 1d       	adc	r25, r1
 43c:	b2 9f       	mul	r27, r18
 43e:	70 0d       	add	r23, r0
 440:	81 1d       	adc	r24, r1
 442:	11 24       	eor	r1, r1
 444:	91 1d       	adc	r25, r1
 446:	08 95       	ret

00000448 <__udivmodhi4>:
 448:	aa 1b       	sub	r26, r26
 44a:	bb 1b       	sub	r27, r27
 44c:	51 e1       	ldi	r21, 0x11	; 17
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__udivmodhi4_ep>

00000450 <__udivmodhi4_loop>:
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	a6 17       	cp	r26, r22
 456:	b7 07       	cpc	r27, r23
 458:	10 f0       	brcs	.+4      	; 0x45e <__udivmodhi4_ep>
 45a:	a6 1b       	sub	r26, r22
 45c:	b7 0b       	sbc	r27, r23

0000045e <__udivmodhi4_ep>:
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	5a 95       	dec	r21
 464:	a9 f7       	brne	.-22     	; 0x450 <__udivmodhi4_loop>
 466:	80 95       	com	r24
 468:	90 95       	com	r25
 46a:	bc 01       	movw	r22, r24
 46c:	cd 01       	movw	r24, r26
 46e:	08 95       	ret

00000470 <__itoa_ncheck>:
 470:	bb 27       	eor	r27, r27
 472:	4a 30       	cpi	r20, 0x0A	; 10
 474:	31 f4       	brne	.+12     	; 0x482 <__itoa_ncheck+0x12>
 476:	99 23       	and	r25, r25
 478:	22 f4       	brpl	.+8      	; 0x482 <__itoa_ncheck+0x12>
 47a:	bd e2       	ldi	r27, 0x2D	; 45
 47c:	90 95       	com	r25
 47e:	81 95       	neg	r24
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	0c 94 44 02 	jmp	0x488	; 0x488 <__utoa_common>

00000486 <__utoa_ncheck>:
 486:	bb 27       	eor	r27, r27

00000488 <__utoa_common>:
 488:	fb 01       	movw	r30, r22
 48a:	55 27       	eor	r21, r21
 48c:	aa 27       	eor	r26, r26
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	aa 1f       	adc	r26, r26
 494:	a4 17       	cp	r26, r20
 496:	10 f0       	brcs	.+4      	; 0x49c <__utoa_common+0x14>
 498:	a4 1b       	sub	r26, r20
 49a:	83 95       	inc	r24
 49c:	50 51       	subi	r21, 0x10	; 16
 49e:	b9 f7       	brne	.-18     	; 0x48e <__utoa_common+0x6>
 4a0:	a0 5d       	subi	r26, 0xD0	; 208
 4a2:	aa 33       	cpi	r26, 0x3A	; 58
 4a4:	08 f0       	brcs	.+2      	; 0x4a8 <__utoa_common+0x20>
 4a6:	a9 5d       	subi	r26, 0xD9	; 217
 4a8:	a1 93       	st	Z+, r26
 4aa:	00 97       	sbiw	r24, 0x00	; 0
 4ac:	79 f7       	brne	.-34     	; 0x48c <__utoa_common+0x4>
 4ae:	b1 11       	cpse	r27, r1
 4b0:	b1 93       	st	Z+, r27
 4b2:	11 92       	st	Z+, r1
 4b4:	cb 01       	movw	r24, r22
 4b6:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <strrev>

000004ba <strrev>:
 4ba:	dc 01       	movw	r26, r24
 4bc:	fc 01       	movw	r30, r24
 4be:	67 2f       	mov	r22, r23
 4c0:	71 91       	ld	r23, Z+
 4c2:	77 23       	and	r23, r23
 4c4:	e1 f7       	brne	.-8      	; 0x4be <strrev+0x4>
 4c6:	32 97       	sbiw	r30, 0x02	; 2
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <strrev+0x18>
 4ca:	7c 91       	ld	r23, X
 4cc:	6d 93       	st	X+, r22
 4ce:	70 83       	st	Z, r23
 4d0:	62 91       	ld	r22, -Z
 4d2:	ae 17       	cp	r26, r30
 4d4:	bf 07       	cpc	r27, r31
 4d6:	c8 f3       	brcs	.-14     	; 0x4ca <strrev+0x10>
 4d8:	08 95       	ret

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
